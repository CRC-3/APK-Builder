name: Android APK Builder

on:
  workflow_dispatch:
    inputs:
      module:
        description: 'Optional: Gradle module to assemble (e.g., app)'
        required: false
        default: ''
  push:
    branches: [ main, master ]
    paths:
      - '**.zip'
      - '**.gradle'
      - 'gradlew*'
      - 'app/**'
      - '*/src/**'

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Locate and extract app ZIP (if present)
        id: unzip
        shell: bash
        run: |
          set -e
          shopt -s nullglob
          zips=(./*.zip ./zips/*.zip)
          if (( ${#zips[@]} )); then
            echo "Found ZIP: ${zips[0]}"
            mkdir -p source
            unzip -q "${zips[0]}" -d source
            entries=(source/*)
            if [ ${#entries[@]} -eq 1 ] && [ -d "${entries[0]}" ]; then
              mv "${entries[0]}" src && rmdir source
            else
              mv source src
            fi
            echo "project_dir=src" >> "$GITHUB_OUTPUT"
          else
            echo "No ZIP found; using repo contents as project."
            echo "project_dir=." >> "$GITHUB_OUTPUT"
          fi

      - name: Detect Gradle wrapper path
        id: gradle
        shell: bash
        run: |
          set -e
          ROOT="${{ steps.unzip.outputs.project_dir }}"
          WRAPPER=$(find "$ROOT" -name "gradlew" -type f | head -n 1 || true)
          if [ -z "$WRAPPER" ]; then
            echo "No gradlew found. Initializing Gradle wrapper..."
            sudo apt-get update -y
            sudo apt-get install -y gradle
            (cd "$ROOT" && gradle wrapper)
            WRAPPER=$(find "$ROOT" -name "gradlew" -type f | head -n 1)
          fi
          chmod +x "$WRAPPER"
          echo "wrapper=$WRAPPER" >> "$GITHUB_OUTPUT"
          echo "project_root=$(dirname "$WRAPPER")" >> "$GITHUB_OUTPUT"

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: Install Android SDK
        uses: android-actions/setup-android@v3

      - name: Accept Android SDK licenses
        run: yes | sdkmanager --licenses

      - name: Enable Gradle build cache
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: false

      - name: Build Debug APK
        working-directory: ${{ steps.gradle.outputs.project_root }}
        run: |
          if [ -n "${{ github.event.inputs.module }}" ]; then
            ./gradlew ${{ github.event.inputs.module }}:assembleDebug --stacktrace
          else
            ./gradlew assembleDebug --stacktrace
          fi

      - name: Collect build outputs
        id: collect
        working-directory: ${{ steps.gradle.outputs.project_root }}
        shell: bash
        run: |
          set -e
          mkdir -p "$GITHUB_WORKSPACE/artifacts" "$GITHUB_WORKSPACE/reports"
          # Copy APKs and AABs
          find . -type f \( -name "*.apk" -o -name "*.aab" \) -print0 | while IFS= read -r -d '' f; do
            cp "$f" "$GITHUB_WORKSPACE/artifacts/"
          done
          # Copy build reports (if any)
          find . -type d -path "*/build/reports" -exec cp -r {} "$GITHUB_WORKSPACE/reports/" \; || true
          count=$(ls -1 "$GITHUB_WORKSPACE/artifacts" 2>/dev/null | wc -l | xargs)
          echo "found=$count" >> "$GITHUB_OUTPUT"

      - name: Upload APK/AAB artifacts
        if: steps.collect.outputs.found != '0'
        uses: actions/upload-artifact@v4
        with:
          name: apk-${{ github.sha }}
          path: artifacts
          if-no-files-found: error
          retention-days: 30

      - name: Upload build reports
        uses: actions/upload-artifact@v4
        with:
          name: reports-${{ github.sha }}
          path: reports
          if-no-files-found: ignore
          retention-days: 14
